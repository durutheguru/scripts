
version: '3.1'


services:

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - docker-net


  kafka:
    image: durutheguru/wurstmeister-kafka:latest
    platform: linux/arm64/v8
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - docker-net


  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - "8080:8080"
    networks:
      - docker-net


  mysqldb:
    image: mysql:8.0
    restart: always
    healthcheck:
      test: "mysql $$MYSQL_DATABASE -uroot -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1;'"
      interval: 10s
      timeout: 300s
      retries: 20
    environment:
      - MYSQL_DATABASE=database
      - MYSQL_ROOT_PASSWORD=1234567890
    ports:
      - "33080:3306"
    volumes:
      - db:/var/lib/mysql
    networks:
      - docker-net


  connect:
    image: quay.io/debezium/connect:2.1
    restart: always
    depends_on:
      - kafka
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka
     - mysqldb
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=connect_configs
     - OFFSET_STORAGE_TOPIC=connect_offsets
     - STATUS_STORAGE_TOPIC=source_connect_statuses
    networks:
      - docker-net


volumes:
  db:


networks:
  docker-net:


